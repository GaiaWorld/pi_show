[package]
name = "gui_web"
version = "0.1.0"
authors = ["suncy <suncy@yineng.com>"]
edition = "2018"

# [lib]
# crate-type = ["cdylib"]

[dependencies]
console_error_panic_hook = "0.1"
flex_layout = { path = "../../pi_lib/flex_layout"}
getrandom = { version = "0.2.3", features = ["js"] }
atom = { path = "../../pi_lib/atom"}
data_view = { path = "../../pi_lib/data_view"}
share = { path = "../../pi_lib/share"}
ecs = { path = "../../pi_lib/ecs"}
# ecs = { path = "../../pi_lib/ecs"}
# ecs = { path = "../../pi_lib/ecs", features = ["wasm-bindgen"]}
idtree = { path = "../../pi_lib/idtree"}
ecs_derive = { path = "../../pi_lib/ecs_derive"}
map = { path = "../../pi_lib/map"}
debug_info = { path = "../../pi_lib/debug_info"}#, features=["print","wasm-bindgen"]
hash = { path = "../../pi_lib/hash"}
bincode = { path = "../../pi_lib/bincode"}
res = { path = "../../pi_lib/res"}
cross_performance = { path = "../../pi_lib/cross_performance", features=["wasm-bindgen"]}


cg2d = { path = "../../pi_math/cg2d"}
color = { path = "../../pi_math/color"}
# cgmath = { path = "../../pi_math/cgmath"}
# octree = { path = "../../pi_math/octree"}
spatialtree = { path = "../../pi_math/spatialtree"}
# cg2d = { git = "https://github.com/GaiaWorld/pi_math.git"}
# color = { git = "https://github.com/GaiaWorld/pi_math.git"}
# cgmath = { git = "https://github.com/GaiaWorld/pi_math.git"}
# octree = { git = "https://github.com/GaiaWorld/pi_math.git"}

hal_webgl = {path="../hal_webgl"}
gui_tool = {path="../gui_tool"}
hal_core = {path="../hal_core", features = ["serde"]}
# platform = {path="../../pi_lib/platform", features = ["web"]}
cssparser = "0.29"

gui = {path="../gui", features = ["web"]} #, features = ["performance"]
res_mgr_web = { path = "../res_mgr_web"}
# stdweb = "0.4"
# stdweb-derive = "0.5.1"
# webgl-rendering-context = "0.1.0"
wasm-bindgen = { version = "*", features = ["serde-serialize"] }
js-sys = "*"
serde_json = "1.0"

lazy_static = "1"
serde = { version = "1.0", features = ["derive"]}
paste = "0.1"
ordered-float = "1.0"
log = "*"
nalgebra = "0.24.0"
smallvec={version = "1.8", features = ["serde"]}

[dependencies.web-sys]
version = "*"
features = [
	"WebGlRenderingContext",
	"WebGlBuffer",
	"WebGlVertexArrayObject",
	"WebGlShader",
	"WebGlProgram",
	"WebGlUniformLocation",
	"WebGlActiveInfo",
	"WebGlTexture",
	"WebGlRenderbuffer",
	"WebGlFramebuffer",
	"Window",
	"HtmlCanvasElement",
	"Document",
	"CanvasRenderingContext2d",
	"ImageData",
	"HtmlImageElement",
	"console",
]
# [package.metadata.wasm-pack.profile.release]
# debug=true
# wasm-opt = ['-O4', '-g']

[profile.release]
lto = true #这为LLVM提供了更多内联和修剪功能的机会。它不仅使.wasm尺寸更小，而且在运行时也更快！缺点是编译将花费更长的时间
#opt-level = 's'  # 默认情况下，对LLVM的优化通道进行了调整，以提高速度，而不是大小。我们可以通过修改以下
# opt-level = "z" # 了更积极地优化尺寸，以进一步的潜在速度成本
# 请注意，令人惊讶的是，opt-level = "s"有时二进制文件的大小可能小于opt-level = "z"。总是测量！
opt-level = "z" # 性能优先
panic = 'abort'
codegen-units = 1

# [package.metadata.wasm-pack.profile.release]
# wasm-opt = ['-O4']

# [profile.release]
# debug = true
# lto = false
# opt-level = 1
# # lto = true #这为LLVM提供了更多内联和修剪功能的机会。它不仅使.wasm尺寸更小，而且在运行时也更快！缺点是编译将花费更长的时间
# # #opt-level = 's'  # 默认情况下，对LLVM的优化通道进行了调整，以提高速度，而不是大小。我们可以通过修改以下
# # # opt-level = "z" # 了更积极地优化尺寸，以进一步的潜在速度成本
# # # 请注意，令人惊讶的是，opt-level = "s"有时二进制文件的大小可能小于opt-level = "z"。总是测量！
# # opt-level = 1
# # panic = 'abort'
# # codegen-units = 1

# [profile.release]
# lto = true
# debug = 2
# opt-level = 1
# panic = 'abort'
# codegen-units = 1

# [profile.dev]
# debug = 2
# opt-level = 3

[features]
# default = ["no_debug", "no_define_js", "print"]
# default = ["create_class_by_str"]
# default = ["no_debug", "share/rc"]
# default = ["debug"]
default = ["debug", "create_class_by_str", "share/rc", "res/rc"]
# default = ["share/rc", "ecs/runtime"]
# default = ["debug", "no_debug"]
debug = ["ecs/runtime"]
no_debug = []
no_define_js = []
create_class_by_str = []
